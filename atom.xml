<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一秒的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yimiaoxiehou.github.io/"/>
  <updated>2018-11-14T09:26:47.898Z</updated>
  <id>http://yimiaoxiehou.github.io/</id>
  
  <author>
    <name>yimiao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>effective-java 第三章：对于所有对象都通用的方法</title>
    <link href="http://yimiaoxiehou.github.io/2018/11/14/effective-java/3/"/>
    <id>http://yimiaoxiehou.github.io/2018/11/14/effective-java/3/</id>
    <published>2018-11-14T09:22:05.000Z</published>
    <updated>2018-11-14T09:26:47.898Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Effective Java" scheme="http://yimiaoxiehou.github.io/tags/Effective-Java/"/>
    
  </entry>
  
  <entry>
    <title>effective-java 第二章：创建和销毁对象</title>
    <link href="http://yimiaoxiehou.github.io/2018/11/14/effective-java/2/"/>
    <id>http://yimiaoxiehou.github.io/2018/11/14/effective-java/2/</id>
    <published>2018-11-14T08:00:39.716Z</published>
    <updated>2018-11-14T09:39:27.876Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用静态工厂方法代替构造器"><a href="#使用静态工厂方法代替构造器" class="headerlink" title="使用静态工厂方法代替构造器"></a>使用静态工厂方法代替构造器</h2><h3 id="好处："><a href="#好处：" class="headerlink" title="好处："></a>好处：</h3><ul><li><p>静态工厂有名字。<br>静态工厂的名字可以更清晰的描述返回的对象，比较构造器参数<br>例如:<code>BigInteger.probablePrime(int bitLength,Random rnd)返回一个素数</code><br>需要多个构造器返回多个类型时，只能靠参数识别，开发人员难以记住。而静态工厂方法靠函数名就知道返回的大概内容了。</p></li><li><p>静态工厂方法不必每次调用都创建一个新对象。<br>可以重复利用对象，免去创建多个相同对象的资源消耗（内存和时间）。<br>可以保证单例。<br>可使不可变类不存在两个相同的实例，使当且仅当 <code> a==b </code> 才存在<code> a.equals(b) == true </code>，例如，两个 String 必须要指向同一个，他们才能内容相同。这样做能使用 == 代替 equals() ,直接通过 HashCode 来判断是否相同，提高性能。枚举类（enum）就是这么做的。</p></li><li><p>静态工厂方法可以返回任意子类型的对象。<br>API 可以返回对象，同时又不会使对象的类变为公有的。这种方式可以隐藏实现类。例如 Java 的集合类（Collections）。<br>客户端通过接口来使用实现类，可以隐藏具体的实现类，API 变更时用户不受任何影响。</p></li><li><p>创建对象时代码可以更简洁。</p></li></ul><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><ul><li><p>类如果不含公有的或者受保护的构造器，就不能子类化。</p></li><li><p>与其他静态方法没任何区别，在 API 文档中查找比较困难。</p></li></ul><hr><h2 id="遇到多个构造器参数时要考虑使用构建器"><a href="#遇到多个构造器参数时要考虑使用构建器" class="headerlink" title="遇到多个构造器参数时要考虑使用构建器"></a>遇到多个构造器参数时要考虑使用构建器</h2><h3 id="反模式Antipattern"><a href="#反模式Antipattern" class="headerlink" title="反模式Antipattern"></a>反模式Antipattern</h3><ul><li>层叠构造器<br>缺点：参数多时难以编写和阅读</li></ul><p><img src="https://lh3.googleusercontent.com/-ig3L5v8MEXQ/W-vryP6XSqI/AAAAAAAAEBc/P-zBaAnuumoqaArhX2IkBiVkxGkzkQzAwCHMYCw/I/%255BUNSET%255D" alt="屏幕快照 2018-11-13 下午9.13.12"></p><ul><li>setter() 方法设置参数<br>麻烦，而且暴露了 setter() 参数不安全。</li></ul><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ul><li>Builder 模式<br>不直接生成对象，而是利用所有提供的参数来调用对应的静态工厂，得到一个 builder 对象，然后调用对象的 sette<br>r 来设置参数。</li></ul><p>实现：<br><img src="https://lh3.googleusercontent.com/-nBzQNLiGmLE/W-vsjw4N5PI/AAAAAAAAEB4/AVHH8BIfe4YIsooymuPLkVdYawytBVrIgCHMYCw/I/15421881717779.jpg" alt="15421881717779"><br><img src="https://lh3.googleusercontent.com/-oNoJlX9Eztg/W-vrsGdKlXI/AAAAAAAAEBU/PEI_4UyOua0CtegOZgI1baSyZmQgPbe1wCHMYCw/I/15421153532567.jpg" alt="15421153532567"><br>调用：</p><p><img src="https://lh3.googleusercontent.com/-FsOuvvIsXEk/W-vrsfqaI1I/AAAAAAAAEBY/PqWx0YzmDnEcOu3ssqlQnbzjbIeu9tiSwCHMYCw/I/15421153995393.jpg" alt="15421153995393"></p><h3 id="不足："><a href="#不足：" class="headerlink" title="不足："></a>不足：</h3><ul><li>创建对象必须先创建它的构建起，需要一定的开销。</li><li>代码多。</li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>如果类的构造器或静态工厂具有多个参数时（4个以上），设计这种类使用 Builder 模式更好，它比重叠构造器更易于阅读编写，比 setter 更安全。</p><hr><h2 id="使用私有构造器或枚举类型强化-Singleton-属性"><a href="#使用私有构造器或枚举类型强化-Singleton-属性" class="headerlink" title="使用私有构造器或枚举类型强化 Singleton 属性"></a>使用私有构造器或枚举类型强化 Singleton 属性</h2><h3 id="公有静态成员是个-final-域"><a href="#公有静态成员是个-final-域" class="headerlink" title="公有静态成员是个 final 域"></a>公有静态成员是个 final 域</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// Singleton with public final field</span><br><span class="line">public class Elvis &#123;</span><br><span class="line">    public static final Elvis INSTANCE = new Elvis();</span><br><span class="line">    private Elvis()&#123;...&#125;</span><br><span class="line">    public void leaveTheBuilding()&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>INSTANCE 实例全局唯一，但通过反射机制仍可调用私有构造函数生成新实例。</p><h3 id="公有成员是静态工厂方法（类似于设计模式-——-单例模式）"><a href="#公有成员是静态工厂方法（类似于设计模式-——-单例模式）" class="headerlink" title="公有成员是静态工厂方法（类似于设计模式 —— 单例模式）"></a>公有成员是静态工厂方法（类似于设计模式 —— 单例模式）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// Singleton with static factory</span><br><span class="line">public class Elvis &#123;</span><br><span class="line">    private static final Elvis INSTANCE = new Elvis();</span><br><span class="line">    private Elvis()&#123;...&#125;</span><br><span class="line">    public static Elvis getInstance() &#123; return INSTANCE; &#125;</span><br><span class="line">    public void leaveTheBuilding()&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法提供了灵活性，可以在不改变 API 的情况下，控制是否单例。第二个是可以返回到一个泛型。<br>但在序列化和反序列化时会存在一些问题。</p><h3 id="编写一个包含单个元素的枚举类（最佳实现）"><a href="#编写一个包含单个元素的枚举类（最佳实现）" class="headerlink" title="编写一个包含单个元素的枚举类（最佳实现）"></a>编写一个包含单个元素的枚举类（最佳实现）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Enum singleton - the preferred approach</span><br><span class="line">public enum Elvis &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    public void leaveTheBuilding()&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法和 final 域相似，但是自带了序列化，绝对防止多次实例化，即便是反序列或者使用发射机制攻击。</p><h2 id="对工具类设置私有构造函数"><a href="#对工具类设置私有构造函数" class="headerlink" title="对工具类设置私有构造函数"></a>对工具类设置私有构造函数</h2><h2 id="避免创建不必要的对象"><a href="#避免创建不必要的对象" class="headerlink" title="避免创建不必要的对象"></a>避免创建不必要的对象</h2><p>如使用 <code>String s = “aaa”;</code> 代替 <code>String s = new String(“aaa”);</code>，后者每次都会生成一个新实例。</p><h2 id="消除过期对象引用"><a href="#消除过期对象引用" class="headerlink" title="消除过期对象引用"></a>消除过期对象引用</h2><p>过期对象引用会导致内存泄漏。</p><h3 id="三个常见的内存泄漏"><a href="#三个常见的内存泄漏" class="headerlink" title="三个常见的内存泄漏"></a>三个常见的内存泄漏</h3><ol><li>类管理自己的内存</li><li>缓存</li><li>监听器和其他回调</li></ol><h3 id="详细内容（书本引用-21页-23页）："><a href="#详细内容（书本引用-21页-23页）：" class="headerlink" title="详细内容（书本引用 21页-23页）："></a>详细内容（书本引用 21页-23页）：</h3><p><img src="https://lh3.googleusercontent.com/-VuQtiZn9EzM/W-vjU5BbgJI/AAAAAAAAEAY/t9sN-h5MXOcIz_pgQ8njGcdnxSWuZQQqQCHMYCw/I/%255BUNSET%255D" alt="屏幕快照 2018-11-14 下午4.54.52"><br><img src="https://lh3.googleusercontent.com/-qjH0-kqNm2Y/W-vja6eYJCI/AAAAAAAAEAc/-KZPbmN5gMEpVNQNVcWck9Ymz1eYa3DAACHMYCw/I/%255BUNSET%255D" alt="屏幕快照 2018-11-14 下午4.55.02"><br><img src="https://lh3.googleusercontent.com/-BAwsu0lCPXg/W-vjelYCR0I/AAAAAAAAEAg/9ZfMX2i4JAMQciQl4ZmEDctVEQxFep9lQCHMYCw/I/%255BUNSET%255D" alt="屏幕快照 2018-11-14 下午4.55.10"></p><h2 id="避免使用终结方法（finalizer）"><a href="#避免使用终结方法（finalizer）" class="headerlink" title="避免使用终结方法（finalizer）"></a>避免使用终结方法（finalizer）</h2><p>java 规范不保证终结方法的及时运行，甚至不保证它的运行。可能程序结束时还有终结方法未执行。</p><p>终结方法影响性能，使用终结方法创建和销毁对象大概慢了430倍（作者的测试）。</p><p>对于一些资源的释放，最好显式的释放</p><h3 id="原文引用（感觉无法归纳，orz）"><a href="#原文引用（感觉无法归纳，orz）" class="headerlink" title="原文引用（感觉无法归纳，orz）"></a>原文引用（感觉无法归纳，orz）</h3><p><img src="https://lh3.googleusercontent.com/-ekYLE9xkzKc/W-vop4dVmlI/AAAAAAAAEA0/Oydu-uheHsosOkjQ3R7XxknBZWGIs5heQCHMYCw/I/%255BUNSET%255D" alt="屏幕快照 2018-11-14 下午5.18.05"><br><img src="https://lh3.googleusercontent.com/-ZzsTLiRYfSw/W-vovkUlXpI/AAAAAAAAEBA/h92HlRG-0Agy2BX2YtP-Z3xXM-BDNDdoQCHMYCw/I/%255BUNSET%255D" alt="屏幕快照 2018-11-14 下午5.18.20"><br><img src="https://lh3.googleusercontent.com/-A-qJEuF4vqk/W-vos9tki1I/AAAAAAAAEA4/mFDiehJ7ayoIa5f3oCuOuMzg91svtcEfQCHMYCw/I/%255BUNSET%255D" alt="屏幕快照 2018-11-14 下午5.18.27"><br><img src="https://lh3.googleusercontent.com/-LVZLR6fAubI/W-vovXXgeWI/AAAAAAAAEA8/Ee6E7eXr--c5TPv0XFJUIqleSN5bmsd9gCHMYCw/I/%255BUNSET%255D" alt="屏幕快照 2018-11-14 下午5.18.38"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用静态工厂方法代替构造器&quot;&gt;&lt;a href=&quot;#使用静态工厂方法代替构造器&quot; class=&quot;headerlink&quot; title=&quot;使用静态工厂方法代替构造器&quot;&gt;&lt;/a&gt;使用静态工厂方法代替构造器&lt;/h2&gt;&lt;h3 id=&quot;好处：&quot;&gt;&lt;a href=&quot;#好处：&quot; c
      
    
    </summary>
    
    
      <category term="Effective Java" scheme="http://yimiaoxiehou.github.io/tags/Effective-Java/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yimiaoxiehou.github.io/2018/08/18/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    <id>http://yimiaoxiehou.github.io/2018/08/18/分布式/</id>
    <published>2018-08-18T15:06:42.244Z</published>
    <updated>2018-08-18T15:21:05.403Z</updated>
    
    <content type="html"><![CDATA[<h3 id="弱一致性（最终一致性）："><a href="#弱一致性（最终一致性）：" class="headerlink" title="弱一致性（最终一致性）："></a>弱一致性（最终一致性）：</h3><p>修改不是即时生效，但是一定的时间后一定是一致的。</p><h3 id="强一致性："><a href="#强一致性：" class="headerlink" title="强一致性："></a>强一致性：</h3><p>实时的一致性。</p><h4 id="解决算法"><a href="#解决算法" class="headerlink" title="解决算法"></a>解决算法</h4><ol><li><p>主从同步：master 接受写请求，然后复制到所有从服务器，直到全部返回成功。</p><p> 缺点：低可用性，任何一个节点阻塞，该次写入就出错。</p></li><li><p>多数派：每次写入和读取都大于 N/2 节点</p><p> 缺点：读写并发时，不能保证每次都能拿到最新的值。（读写顺序不确定）</p></li><li><p>Paxos（存在多种）</p><p> | 角色 | 职责 |<br> | –: | :– |<br> | Client | 系统外部角色，发起请求——群众 |<br> | Propser | 接受请求，向集群提出提议。并在冲突时，起到冲突调节的作用——人大代表 |<br> | Accpetor（Voter） | 提议投票和接收者，只有形成法定人数（一般为大多数）时，提议才会被接受——人大代表投票 |<br> | Learner | 提议接受者，backup，备份，对集群一致性没影响——书记官 |</p></li></ol><ol start="4"><li></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;弱一致性（最终一致性）：&quot;&gt;&lt;a href=&quot;#弱一致性（最终一致性）：&quot; class=&quot;headerlink&quot; title=&quot;弱一致性（最终一致性）：&quot;&gt;&lt;/a&gt;弱一致性（最终一致性）：&lt;/h3&gt;&lt;p&gt;修改不是即时生效，但是一定的时间后一定是一致的。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>maven 知识积累</title>
    <link href="http://yimiaoxiehou.github.io/2018/08/18/maven-%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/"/>
    <id>http://yimiaoxiehou.github.io/2018/08/18/maven-知识积累/</id>
    <published>2018-08-18T08:54:00.000Z</published>
    <updated>2018-08-18T12:48:35.910Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ol><li><p>创建 maven 的普通 java 项目：<br> <code>mvn archetype:create<br>  -DgroupId=packageName<br>   -DartifactId=projectName</code></p></li><li><p>创建 maven 的 web 项目：<br> <code>mvn archetype:create<br>  -DgroupId=packageName<br>   -DactifactId=webappName -DarchtypeArtifactId=maven-archetype-webapp</code></p></li></ol><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><table><thead><tr><th style="text-align:right">命令</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:right">mvn compile</td><td style="text-align:left">编译源码</td></tr><tr><td style="text-align:right">mvn test-compile</td><td style="text-align:left">编译测试源码</td></tr><tr><td style="text-align:right">mvn test</td><td style="text-align:left">运行测试</td></tr><tr><td style="text-align:right">mvn package</td><td style="text-align:left">打包项目，在 target 下生成已经压缩的包</td></tr><tr><td style="text-align:right">mvn jar:jar</td><td style="text-align:left">打包成 jar 包</td></tr><tr><td style="text-align:right">mvn install</td><td style="text-align:left">安装源码到本地仓库</td></tr><tr><td style="text-align:right">mvn deply</td><td style="text-align:left">部署到私服仓库，上传部署构建，会把target目录下的文件上传，包括源码</td></tr></tbody></table><h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><table><thead><tr><th style="text-align:right">参数</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:right">-x</td><td style="text-align:left">debug 模式</td></tr><tr><td style="text-align:right">-Dmaven.test.skip=true</td><td style="text-align:left">跳过运行单元测试</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本命令&quot;&gt;&lt;a href=&quot;#基本命令&quot; class=&quot;headerlink&quot; title=&quot;基本命令&quot;&gt;&lt;/a&gt;基本命令&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建 maven 的普通 java 项目：&lt;br&gt; &lt;code&gt;mvn archetype:create&lt;
      
    
    </summary>
    
    
      <category term="maven" scheme="http://yimiaoxiehou.github.io/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>dubbox</title>
    <link href="http://yimiaoxiehou.github.io/2018/08/18/dubbox/"/>
    <id>http://yimiaoxiehou.github.io/2018/08/18/dubbox/</id>
    <published>2018-08-18T08:49:00.000Z</published>
    <updated>2018-08-18T13:00:17.665Z</updated>
    
    <content type="html"><![CDATA[<p>一个分布式的远程调用框架</p><p>由 阿里 dobbo 改进而来，当当维护</p><h2 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h2><p>大型的 web 项目中，多模块之间的远程调用（ RPC ——调用方知道并拥有接口，但实现 在服务端）。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>分布式架构。<br>提供高性能和透明化的 RPC 远程服务调用方案，以及 SOA ——面向服务服务架构的解决方案。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>远程通讯: 提供对多种基于长连接的NIO框架抽象封装，包括多种线程模型，序列化，以及“请求-响应”模式的信息交换方式。</li><li>集群容错: 提供基于接口方法的透明远程过程调用，包括多协议支持，以及软负载均衡，失败容错，地址路由，动态配置等集群支持。</li><li>自动发现: 基于注册中心目录服务，使服务消费方能动态的查找服务提供方，使地址透明，使服务提供方可以平滑增加或减少机器。</li></ol><h2 id="构件："><a href="#构件：" class="headerlink" title="构件："></a>构件：</h2><p><img src="https://lh3.googleusercontent.com/O9axdFXDbtFuArlo9O8DjNYusC5ynTmqrDxuP7F2dtwGlOtFy6UTTh7N-uuHvd01VZKuOtFQvVKD" alt="enter image description here" title="dubbox 组件图"></p><ol><li>注册中心（Registry）</li><li>服务提供方 (Provider)</li><li>服务消费方 (comsumer)</li><li>监控中心 （Monitor）</li><li>服务运行容器 （Container）</li></ol><h2 id="运行："><a href="#运行：" class="headerlink" title="运行："></a>运行：</h2><ol><li>服务日期负责启动，加载，运行服务提供方</li><li>提供方向注册中心注册自己提供的服务</li><li>消费者启动时，向注册中心订阅自己所需的服务</li><li>注册中心返回地址列表给消费者。如果有变动，注册中心使用长连接推送新数据（http:keep-alive）</li><li>消费者从地址列表中，基于软负载均衡算法，选择一台提供者进行调用。如果失败，再选一台调用。</li><li>消费者和提供者，在内存中累计调用次数和时间，每分钟定时发送一次统计数据到监控中心。</li></ol><p>###注册中心————Zookeeper （官方推荐，hadoop 组件）</p><p>##备注：<br>当当并没有上传 dobbox 代码到 maven 仓库中，所以不能直接在 maven 中引用，可以使用 jar 包，或者 maven install 到本地仓库</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一个分布式的远程调用框架&lt;/p&gt;
&lt;p&gt;由 阿里 dobbo 改进而来，当当维护&lt;/p&gt;
&lt;h2 id=&quot;应用场景：&quot;&gt;&lt;a href=&quot;#应用场景：&quot; class=&quot;headerlink&quot; title=&quot;应用场景：&quot;&gt;&lt;/a&gt;应用场景：&lt;/h2&gt;&lt;p&gt;大型的 web 项目
      
    
    </summary>
    
      <category term="架构" scheme="http://yimiaoxiehou.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="dubbox" scheme="http://yimiaoxiehou.github.io/tags/dubbox/"/>
    
      <category term="SOA" scheme="http://yimiaoxiehou.github.io/tags/SOA/"/>
    
      <category term="分布式" scheme="http://yimiaoxiehou.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="RPC" scheme="http://yimiaoxiehou.github.io/tags/RPC/"/>
    
  </entry>
  
  <entry>
    <title>创建简单的 Scripy 项目</title>
    <link href="http://yimiaoxiehou.github.io/2018/07/06/scrapy-tutorial-1/"/>
    <id>http://yimiaoxiehou.github.io/2018/07/06/scrapy-tutorial-1/</id>
    <published>2018-07-06T02:07:00.000Z</published>
    <updated>2018-08-18T08:51:15.763Z</updated>
    
    <content type="html"><![CDATA[<p>在爬虫项目的根目录中输入如下命令：</p><ol><li>创建项目</li></ol><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject demoName</span><br></pre></td></tr></table></figure><p>创建一个名为 <strong>demoName</strong> 的 文件夹.<br>该文件夹即为 <strong>scrapy</strong> 项目的根目录,文件夹中包含以下文件：</p><blockquote><p><span style="color:#FF6666;">scrapy.cfg:</span> 项目的配置文件<br><span style="color:#FF6666;">tutorial/:</span> 该项目的python模块。之后您将在此加入代码。<br><span style="color:#FF6666;">tutorial/items.py:</span> 项目中的item文件.<br><span style="color:#FF6666;">tutorial/pipelines.py:</span> 项目中的pipelines文件.<br><span style="color:#FF6666;">tutorial/settings.py:</span> 项目的设置文件.<br><span style="color:#FF6666;">tutorial/spiders/:</span> 放置spider代码的目录.</p></blockquote><ol start="2"><li>定义数据项 <strong>Item</strong></li></ol><hr><p><strong>Item</strong> 即爬取到的单个网页的数据容器，如果把数据保存到数据库的话， <strong>Item</strong> 即为数据库的行。<br>创建一个 <strong>Item</strong> 类必须继承 <code>scrapy.item</code><br>实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import scrapy</span><br><span class="line"></span><br><span class="line">class TestItem(scrapy.Item):</span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    link = scrapy.Field()</span><br><span class="line">    desc = scrapy.Field()</span><br></pre></td></tr></table></figure></p><h2>3. 编写爬虫</h2><br>在一个 <strong>scrapy</strong> 项目中可以包括多个爬虫，但是默认配置下只能运行一个。如果想启动多个爬虫请参考 —— <a href="https://juejin.im/post/5a1e2a4f6fb9a0451d413a14-" target="_blank" rel="noopener">Scrapy之“并行”爬虫</a><br>创建 <strong>scrapy</strong> 爬虫必须继承 <code>scrapy.Spider</code> 类，且定义以下三个属性：<br><br> - <code>name</code> : 爬虫的 <span style="color:red;">唯一标识</span> ,启动爬虫时就必须传递该参数<br> - <code>start_urls</code> : 包含了Spider启动时爬取的 url 列表。因此，第一个被爬取到的页面将是其中之一。后续的 URL 将从初始页面的数据中提取。<br> - <code>parse()</code> : <strong>spider</strong> 的一个方法。被调用时，每个初始 URL 完成下载后生成的 <code>Response</code> 对象将会作为唯一的参数传递给该函数。。该方法负责解析返回的数据（response data），提前数据——生成 <strong>Item</strong> 以及生成进一步处理的 URL 的 <code>Request</code> 对象。<br><br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import scrapy</span><br><span class="line"></span><br><span class="line">class TestSpider(scrapy.Spider):</span><br><span class="line">    name = &quot;test&quot;</span><br><span class="line">    allowed_domains = [&quot;w3school.com.cn&quot;]</span><br><span class="line">    start_urls = [</span><br><span class="line">        &quot;http://www.w3school.com.cn/html/index.asp&quot;,</span><br><span class="line">        &quot;http://www.w3school.com.cn/js/index.asp&quot;</span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">    def parse(self, response):</span><br><span class="line">        filename = response.url.split(&quot;/&quot;)[-2]</span><br><span class="line">        with open(filename, &apos;wb&apos;) as f:</span><br><span class="line">            f.write(response.body)</span><br></pre></td></tr></table></figure><br><br><h2> 4. 启动爬虫</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl test</span><br></pre></td></tr></table></figure><p>运行该命令时，<code>scrapy</code> 将会为 <code>start_url</code> 中的每个 URL 创建一个 <code>scrapy.Request</code> 对象，并将执行生成的 <code>scrapy.http.Response</code> 作为参数传递给 <code>parse()</code> 方法处理。</p><blockquote><p>虽然 <code>scrapy</code> 启动时会创建十个进程，但是只有一个线程会用于下载网页内容，其他内容都是作 dns 解析之类的工作。<br>那么如何实现 <code>scrapy</code> 的并发呢，有两个方法：</p><ol><li>创建 <strong>docker</strong> 容器，运行多个容器来实现并发，可以通过 <strong>redis</strong> 来控制请求 url 防止重复请求。</li><li>设置 <code>settings.DOWNOAD_DELAY=0</code> 该参数控制网页下载的间隔（单位秒），设置为零可以实现伪并发，但可能会被反爬，但是即便如此设置理论上仍旧只能使用一个 cpu 核心。</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在爬虫项目的根目录中输入如下命令：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建项目&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;
      
    
    </summary>
    
      <category term="python" scheme="http://yimiaoxiehou.github.io/categories/python/"/>
    
    
      <category term="scrapy" scheme="http://yimiaoxiehou.github.io/tags/scrapy/"/>
    
      <category term="spider" scheme="http://yimiaoxiehou.github.io/tags/spider/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yimiaoxiehou.github.io/2018/07/06/hello-world/"/>
    <id>http://yimiaoxiehou.github.io/2018/07/06/hello-world/</id>
    <published>2018-07-06T01:53:23.000Z</published>
    <updated>2018-11-13T13:55:29.463Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
